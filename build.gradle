import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    ext.kotlin_version = '1.1.3-2'

    repositories {
        mavenCentral()
        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}


plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
}

apply plugin: 'kotlin'

group = 'gg.obsidian'
version = '2.0.0'
description = """Use Discourse group as a whitelist"""
ext.url = 'https://github.com/the-obsidian/DiscourseBridge'

repositories {
    maven { url 'https://maven-central.storage.googleapis.com' }
    maven { url 'https://hub.spigotmc.org/nexus/content/groups/public/' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'http://lutece.paris.fr/nexus/content/repositories/lutece_third_party' }
    maven { url 'https://github.com/DV8FromTheWorld/Maven-Repository/raw/master/repo' }

    jcenter()
}

dependencies {
    compile group: 'org.spigotmc', name: 'spigot-api', version:'1.12-R0.1-SNAPSHOT'
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version:'1.1.3-2'
    compile group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.2.0'
}

compileKotlin {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    kotlinOptions {
        jvmTarget = "1.8"
    }
}

processResources {
    filter ReplaceTokens, tokens: [
            'DESCRIPTION': project.property('description'),
            'URL': project.property('url'),
            'VERSION': project.property('version')
    ]
}

build.finalizedBy(shadowJar)

shadowJar {
    classifier 'dist'
    dependencies {
        exclude(dependency('org.spigotmc:.*:.*'))
    }
    exclude '.cache'
}

task copyFinalJar(type: Copy) {
    from "build/libs/${shadowJar.archiveName}"
    into "build"
    rename(
            shadowJar.archiveName,
            "${project.property('name')}-${project.property('version')}.jar"
    )
}

shadowJar.finalizedBy(copyFinalJar)
